{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.11.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":111543,"databundleVersionId":13750964,"sourceType":"competition"}],"dockerImageVersionId":31089,"isInternetEnabled":false,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"markdown","source":"<div style=\"padding:18px;border-radius:12px;\nbackground:linear-gradient(135deg,#06b6d4,#7c3aed);\ncolor:white;text-align:center;box-shadow:0 4px 18px rgba(0,0,0,0.15)\">\n  <h1 style=\"margin:0;font-size:2.2rem;\"> Hull Tactical Market Prediction</h1>\n  <p style=\"margin:6px 0 0;font-size:1.1rem;\">\n    AI-driven analysis of market trends using Python & Machine Learning\n  </p>\n  <div style=\"margin-top:10px;font-size:0.9rem;\">\n    <span style=\"background:white;color:#7c3aed;padding:4px 10px;border-radius:8px;font-weight:600\">\n      Finance\n    </span>\n    <span style=\"background:white;color:#06b6d4;padding:4px 10px;border-radius:8px;font-weight:600\">\n      Machine Learning\n    </span>\n  </div>\n</div>\n","metadata":{}},{"cell_type":"code","source":"import os\nimport warnings\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.feature_selection import SelectKBest, f_regression\nfrom sklearn.model_selection import TimeSeriesSplit\nfrom sklearn.metrics import mean_squared_error\nimport lightgbm as lgb\n\nwarnings.filterwarnings(\"ignore\")\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","trusted":true,"execution":{"iopub.status.busy":"2025-09-18T05:15:43.857477Z","iopub.execute_input":"2025-09-18T05:15:43.857888Z","iopub.status.idle":"2025-09-18T05:15:43.871677Z","shell.execute_reply.started":"2025-09-18T05:15:43.85786Z","shell.execute_reply":"2025-09-18T05:15:43.870602Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"<div style=\"\n    background: linear-gradient(90deg, #6a11cb, #2575fc);\n    color: white;\n    padding: 15px;\n    border-radius: 10px;\n    font-size: 22px;\n    font-weight: bold;\n    text-align: center;\n    box-shadow: 2px 2px 10px rgba(0,0,0,0.2);\n\">\nConfiguration Step\n</div>\n","metadata":{}},{"cell_type":"code","source":"DEBUG = True\n\nTRAIN_PATH = \"/kaggle/input/hull-tactical-market-prediction/train.csv\"\nTEST_PATH = \"/kaggle/input/hull-tactical-market-prediction/test.csv\"\nOUT_PATH = \"/kaggle/working/submission.csv\"\n\n# Explicit columns (set if known, else auto-detect)\nDATE_COL   = None   \nTARGET_COL = None   \nMARKET_COL = None   \n\n# Model & Features\nUSE_LIGHTGBM_IF_AVAILABLE = True\nRANDOM_STATE  = 42\nMAX_FEATURES  = 80\nRF_N_ESTIMATORS = 120\nRF_MAX_DEPTH = 8\nVOL_FACTOR = 1.2   # strategy vol <= 120% market vol\nLAGS = [1, 2]\nROLL_WINDOWS = [5, 21]","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-18T05:15:43.873548Z","iopub.execute_input":"2025-09-18T05:15:43.87393Z","iopub.status.idle":"2025-09-18T05:15:43.883712Z","shell.execute_reply.started":"2025-09-18T05:15:43.873896Z","shell.execute_reply":"2025-09-18T05:15:43.882761Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"<div style=\"\n    background: linear-gradient(90deg, #6a11cb, #2575fc);\n    color: white;\n    padding: 15px;\n    border-radius: 10px;\n    font-size: 22px;\n    font-weight: bold;\n    text-align: center;\n    box-shadow: 2px 2px 10px rgba(0,0,0,0.2);\n\">\nUtility Designing Step\n</div>\n","metadata":{}},{"cell_type":"code","source":"def log(msg): \n    print(f\" âœ¨ {msg}\")\n\ndef load_csv(path):\n    if not os.path.exists(path):\n        raise FileNotFoundError(f\"{path} not found.\")\n    return pd.read_csv(path)\n\ndef infer_date_column(df):\n    for c in df.columns:\n        if 'date' in c.lower(): return c\n    return None\n\ndef infer_target_column(df):\n    candidates = ['excess_return','target','y','ret','return']\n    for cand in candidates:\n        for c in df.columns:\n            if cand == c.lower(): return c\n    return df.select_dtypes(include=[np.number]).columns[-1]\n\ndef infer_market_column(df):\n    for c in df.columns:\n        if 'sp500' in c.lower() or 'market' in c.lower():\n            return c\n    return None\n\ndef compute_market_returns(df, market_col):\n    if market_col is None or market_col not in df: return None\n    if df[market_col].mean() > 1:  # price series\n        return df[market_col].pct_change().fillna(0)\n    return df[market_col].fillna(0)\n\ndef make_features(df, base_cols, lags=LAGS, rolls=ROLL_WINDOWS):\n    X = pd.DataFrame(index=df.index)\n    for c in base_cols:\n        s = pd.to_numeric(df[c], errors='coerce').fillna(0)\n        X[c] = s\n        # lags\n        for l in lags:\n            X[f\"{c}_lag{l}\"] = s.shift(l).fillna(0)\n        # rolling stats\n        for w in rolls:\n            X[f\"{c}_rmean{w}\"] = s.rolling(w).mean().shift(1).fillna(0)\n            X[f\"{c}_rstd{w}\"]  = s.rolling(w).std().shift(1).fillna(0)\n    return X\n\ndef select_features(X, y, k=MAX_FEATURES):\n    if X.shape[1] <= k: return X.columns.tolist()\n    selector = SelectKBest(f_regression, k=k).fit(X.fillna(0), y)\n    return X.columns[selector.get_support()].tolist()\n\ndef train_model(X, y):\n    try:\n        if USE_LIGHTGBM_IF_AVAILABLE:\n            import lightgbm as lgb\n            model = lgb.LGBMRegressor(\n                objective=\"regression\", learning_rate=0.05,\n                n_estimators=300, num_leaves=31,\n                random_state=RANDOM_STATE, n_jobs=-1\n            )\n            model.fit(X, y)\n            return model\n    except Exception: pass\n    \n    model = RandomForestRegressor(\n        n_estimators=RF_N_ESTIMATORS, max_depth=RF_MAX_DEPTH,\n        random_state=RANDOM_STATE, n_jobs=-1\n    )\n    model.fit(X, y)\n    return model\n\ndef map_to_allocations(preds, target_std):\n    denom = max(1e-12, 2.0 * target_std)\n    alloc_raw = 1.0 + np.tanh(preds / denom)\n    return np.clip(alloc_raw, 0.0, 2.0)\n\ndef adjust_vol(alloc, market_vol, factor=VOL_FACTOR):\n    if market_vol <= 0 or np.isnan(market_vol): return alloc\n    allowed = factor * market_vol\n    implied = alloc * market_vol\n    scale = np.minimum(1.0, allowed / (implied + 1e-12))\n    return np.clip(alloc * scale, 0.0, 2.0)\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-18T05:15:43.884698Z","iopub.execute_input":"2025-09-18T05:15:43.885035Z","iopub.status.idle":"2025-09-18T05:15:43.9146Z","shell.execute_reply.started":"2025-09-18T05:15:43.885014Z","shell.execute_reply":"2025-09-18T05:15:43.913592Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"import os\n\ndef check_kaggle_paths():\n    print(\"Checking Kaggle input folder...\")\n    if os.path.exists(\"/kaggle/input\"):\n        print(\"Datasets in /kaggle/input:\", os.listdir(\"/kaggle/input\"))\n    else:\n        print(\"Kaggle input folder not found!\")\n    \n    # Optional: check train/test paths\n    print(\"Train exists:\", os.path.exists(TRAIN_PATH))\n    print(\"Test exists:\", os.path.exists(TEST_PATH))\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-18T05:15:43.916345Z","iopub.execute_input":"2025-09-18T05:15:43.916585Z","iopub.status.idle":"2025-09-18T05:15:43.928667Z","shell.execute_reply.started":"2025-09-18T05:15:43.916567Z","shell.execute_reply":"2025-09-18T05:15:43.927621Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"<div style=\"\n    background: linear-gradient(90deg, #6a11cb, #2575fc);\n    color: white;\n    padding: 15px;\n    border-radius: 10px;\n    font-size: 22px;\n    font-weight: bold;\n    text-align: center;\n    box-shadow: 2px 2px 10px rgba(0,0,0,0.2);\n\">\nMain Running Step\n</div>\n","metadata":{}},{"cell_type":"code","source":"import os\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport lightgbm as lgb\n\nDEBUG = True  # True = local exploration; False = Kaggle submission\n\ndef main():\n    if DEBUG:\n        check_kaggle_paths()\n\n    # Step 1: Load Data\n    log(\"Step 1: Loading Dataset\")\n    train = load_csv(TRAIN_PATH)\n    test = load_csv(TEST_PATH)\n    log(f\"<b>Train shape:</b> {train.shape} &nbsp; | &nbsp; <b>Test shape:</b> {test.shape}\")\n\n    # Step 1b: Infer columns\n    date_col = DATE_COL or infer_date_column(train)\n    target_col = TARGET_COL or infer_target_column(train)\n    market_col = MARKET_COL or infer_market_column(train)\n\n    if date_col:\n        for df in [train, test]:\n            if date_col in df:\n                df[date_col] = pd.to_datetime(df[date_col], errors=\"coerce\")\n\n    # Step 2: Feature Engineering\n    log(\"Step 2: Feature Engineering\")\n    train[\"_mkt_ret\"] = compute_market_returns(train, market_col)\n    base_cols = [c for c in train.select_dtypes(np.number).columns if c != target_col and c in test.columns]\n    log(f\"<b>Using {len(base_cols)} base features</b>\")\n\n    X_train = make_features(train, base_cols)\n    X_test = make_features(test, base_cols)\n    common = [c for c in X_train if c in X_test]\n    X_train, X_test = X_train[common].fillna(0), X_test[common].fillna(0)\n    y = train[target_col].fillna(0).values\n\n    # Step 3: Feature Selection\n    log(\"Step 3: Feature Selection\")\n    selected = select_features(X_train, y)\n    log(f\"<b>Selected {len(selected)} features</b>\")\n    X_train, X_test = X_train[selected], X_test[selected]\n\n    # Step 4: Visualization (DEBUG only)\n    if DEBUG:\n        log(\"Step 4: Visualization\")\n        plt.figure(figsize=(14, 10))\n        sns.heatmap(X_train.corr(), cmap=\"coolwarm\", center=0, cbar_kws={'shrink':0.8})\n        plt.title(\"Correlation Heatmap of Selected Features\")\n        plt.show()\n\n        dtrain = lgb.Dataset(X_train, label=y)\n        params = {\"objective\": \"regression\", \"metric\": \"rmse\", \"verbosity\": -1, \"seed\": 42}\n        gbm = lgb.train(params, dtrain, num_boost_round=100)\n        lgb.plot_importance(gbm, max_num_features=20, importance_type=\"gain\", figsize=(14,10))\n        plt.title(\"Top 20 Feature Importances\")\n        plt.show()\n\n        X_train[selected[:6]].hist(bins=30, figsize=(14,8))\n        plt.suptitle(\"Distributions of First 6 Selected Features\")\n        plt.show()\n\n    # Step 5: Model Training\n    log(\"Step 5: Model Training\")\n    model = train_model(X_train, y)\n\n    # Step 6: Predictions\n    log(\"Step 6: Predictions\")\n    preds = model.predict(X_test)\n    target_std = np.std(y) or 1.0\n    allocs = map_to_allocations(preds, target_std)\n\n    if \"_mkt_ret\" in train:\n        mkt_vol_21 = train[\"_mkt_ret\"].rolling(21).std().iloc[-1]\n        if np.isnan(mkt_vol_21):\n            mkt_vol_21 = train[\"_mkt_ret\"].std()\n        log(f\"<b>Market 21d volatility:</b> {mkt_vol_21:.6f}\")\n        allocs = adjust_vol(allocs, mkt_vol_21)\n\n    # Step 7: Save Submission\n    OUT_PATH = \"/kaggle/working/submission.parquet\"\n    out = pd.DataFrame({\n        \"date\": test[date_col].dt.strftime(\"%Y-%m-%d\") if date_col in test else np.arange(len(test)),\n        \"allocation\": np.round(allocs, 6)\n    })\n    out.to_parquet(OUT_PATH, index=False, engine=\"pyarrow\")\n    log(f\"<b>Submission saved to:</b> {OUT_PATH}\")\n\n\n# ====================================================\nif __name__ == \"__main__\":\n    main()\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-18T05:15:43.976822Z","iopub.execute_input":"2025-09-18T05:15:43.977657Z","iopub.status.idle":"2025-09-18T05:15:50.274044Z","shell.execute_reply.started":"2025-09-18T05:15:43.977629Z","shell.execute_reply":"2025-09-18T05:15:50.273277Z"}},"outputs":[],"execution_count":null}]}