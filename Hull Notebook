{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.11.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":111543,"databundleVersionId":13750964,"sourceType":"competition"}],"dockerImageVersionId":31089,"isInternetEnabled":false,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"markdown","source":"## Imports","metadata":{}},{"cell_type":"code","source":"import os\nfrom pathlib import Path\nimport datetime\n\nfrom tqdm import tqdm\nfrom dataclasses import dataclass, asdict\n\nimport polars as pl \nimport numpy as np\nfrom sklearn.linear_model import ElasticNet, ElasticNetCV, LinearRegression\nfrom sklearn.preprocessing import StandardScaler\n\nimport kaggle_evaluation.default_inference_server","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-19T03:06:53.701799Z","iopub.execute_input":"2025-09-19T03:06:53.702066Z","iopub.status.idle":"2025-09-19T03:06:57.496159Z","shell.execute_reply.started":"2025-09-19T03:06:53.702045Z","shell.execute_reply":"2025-09-19T03:06:57.495049Z"}},"outputs":[],"execution_count":1},{"cell_type":"markdown","source":"## Project Directory Structure","metadata":{}},{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","trusted":true,"execution":{"iopub.status.busy":"2025-09-19T03:31:45.343328Z","iopub.execute_input":"2025-09-19T03:31:45.343613Z","iopub.status.idle":"2025-09-19T03:31:45.355958Z","shell.execute_reply.started":"2025-09-19T03:31:45.343593Z","shell.execute_reply":"2025-09-19T03:31:45.354955Z"}},"outputs":[{"name":"stdout","text":"/kaggle/input/hull-tactical-market-prediction/train.csv\n/kaggle/input/hull-tactical-market-prediction/test.csv\n/kaggle/input/hull-tactical-market-prediction/kaggle_evaluation/default_inference_server.py\n/kaggle/input/hull-tactical-market-prediction/kaggle_evaluation/default_gateway.py\n/kaggle/input/hull-tactical-market-prediction/kaggle_evaluation/__init__.py\n/kaggle/input/hull-tactical-market-prediction/kaggle_evaluation/core/templates.py\n/kaggle/input/hull-tactical-market-prediction/kaggle_evaluation/core/base_gateway.py\n/kaggle/input/hull-tactical-market-prediction/kaggle_evaluation/core/relay.py\n/kaggle/input/hull-tactical-market-prediction/kaggle_evaluation/core/kaggle_evaluation.proto\n/kaggle/input/hull-tactical-market-prediction/kaggle_evaluation/core/__init__.py\n/kaggle/input/hull-tactical-market-prediction/kaggle_evaluation/core/generated/kaggle_evaluation_pb2.py\n/kaggle/input/hull-tactical-market-prediction/kaggle_evaluation/core/generated/kaggle_evaluation_pb2_grpc.py\n/kaggle/input/hull-tactical-market-prediction/kaggle_evaluation/core/generated/__init__.py\n","output_type":"stream"}],"execution_count":20},{"cell_type":"markdown","source":"## Configurations","metadata":{}},{"cell_type":"code","source":"# ============ PATHS ============\nDATA_PATH: Path = Path('/kaggle/input/hull-tactical-market-prediction/')\n\n# ============ RETURNS TO SIGNAL CONFIGS ============\nMIN_SIGNAL: float = 0.0                         # Minimum value for the daily signal \nMAX_SIGNAL: float = 2.0                         # Maximum value for the daily signal \nSIGNAL_MULTIPLIER: float = 400.0                # Multiplier of the OLS market forward excess returns predictions to signal \n\n# ============ MODEL CONFIGS ============\nCV: int = 10                                    # Number of cross validation folds in the model fitting\nL1_RATIO: float = 0.5                           # ElasticNet mixing parameter\nALPHAS: np.ndarray = np.logspace(-4, 2, 100)    # Constant that multiplies the penalty terms\nMAX_ITER: int = 1000000                         # The maximum number of iterations","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-19T03:26:35.188791Z","iopub.execute_input":"2025-09-19T03:26:35.189065Z","iopub.status.idle":"2025-09-19T03:26:35.195267Z","shell.execute_reply.started":"2025-09-19T03:26:35.189045Z","shell.execute_reply":"2025-09-19T03:26:35.193916Z"}},"outputs":[],"execution_count":3},{"cell_type":"markdown","source":"## Dataclasses Helpers","metadata":{}},{"cell_type":"code","source":"@dataclass\nclass DatasetOutput:\n    X_train : pl.DataFrame \n    X_test: pl.DataFrame\n    y_train: pl.Series\n    y_test: pl.Series\n    scaler: StandardScaler\n\n@dataclass \nclass ElasticNetParameters:\n    l1_ratio : float \n    cv: int\n    alphas: np.ndarray \n    max_iter: int \n    \n    def __post_init__(self): \n        if self.l1_ratio < 0 or self.l1_ratio > 1: \n            raise ValueError(\"Wrong initializing value for ElasticNet l1_ratio\")\n        \n@dataclass(frozen=True)\nclass RetToSignalParameters:\n    signal_multiplier: float \n    min_signal : float = MIN_SIGNAL\n    max_signal : float = MAX_SIGNAL","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-19T03:26:38.134556Z","iopub.execute_input":"2025-09-19T03:26:38.134858Z","iopub.status.idle":"2025-09-19T03:26:38.143001Z","shell.execute_reply.started":"2025-09-19T03:26:38.134837Z","shell.execute_reply":"2025-09-19T03:26:38.141954Z"}},"outputs":[],"execution_count":4},{"cell_type":"markdown","source":"## Set the Parameters","metadata":{}},{"cell_type":"code","source":"ret_signal_params = RetToSignalParameters(\n    signal_multiplier= SIGNAL_MULTIPLIER\n)\n\nenet_params = ElasticNetParameters(\n    l1_ratio = L1_RATIO, \n    cv = CV, \n    alphas = ALPHAS, \n    max_iter = MAX_ITER\n)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-19T03:28:48.387095Z","iopub.execute_input":"2025-09-19T03:28:48.387505Z","iopub.status.idle":"2025-09-19T03:28:48.392673Z","shell.execute_reply.started":"2025-09-19T03:28:48.387481Z","shell.execute_reply":"2025-09-19T03:28:48.391488Z"}},"outputs":[],"execution_count":12},{"cell_type":"markdown","source":"## Dataset Loading/Creating Helper Functions","metadata":{}},{"cell_type":"code","source":"def load_trainset() -> pl.DataFrame:\n    \"\"\"\n    Loads and preprocesses the training dataset.\n\n    Returns:\n        pl.DataFrame: The preprocessed training DataFrame.\n    \"\"\"\n    return (\n        pl.read_csv(DATA_PATH / \"train.csv\")\n        .rename({'market_forward_excess_returns':'target'})\n        .with_columns(\n            pl.exclude('date_id').cast(pl.Float64, strict=False)\n        )\n        .head(-10)\n    )\n\ndef load_testset() -> pl.DataFrame:\n    \"\"\"\n    Loads and preprocesses the testing dataset.\n\n    Returns:\n        pl.DataFrame: The preprocessed testing DataFrame.\n    \"\"\"\n    return (\n        pl.read_csv(DATA_PATH / \"test.csv\")\n        .rename({'lagged_forward_returns':'target'})\n        .with_columns(\n            pl.exclude('date_id').cast(pl.Float64, strict=False)\n        )\n    )\n\ndef create_example_dataset(df: pl.DataFrame) -> pl.DataFrame:\n    \"\"\"\n    Creates new features and cleans a DataFrame.\n\n    Args:\n        df (pl.DataFrame): The input Polars DataFrame.\n\n    Returns:\n        pl.DataFrame: The DataFrame with new features, selected columns, and no null values.\n    \"\"\"\n    vars_to_keep: List[str] = [\n        \"S2\", \"E2\", \"E3\", \"P9\", \"S1\", \"S5\", \"I2\", \"P8\",\n        \"P10\", \"P12\", \"P13\", \"U1\", \"U2\"\n    ]\n\n    return (\n        df.with_columns(\n            (pl.col(\"I2\") - pl.col(\"I1\")).alias(\"U1\"),\n            (pl.col(\"M11\") / ((pl.col(\"I2\") + pl.col(\"I9\") + pl.col(\"I7\")) / 3)).alias(\"U2\")\n        )\n        .select([\"date_id\", \"target\"] + vars_to_keep)\n        .with_columns([\n            pl.col(col).fill_null(pl.col(col).ewm_mean(com=0.5))\n            for col in vars_to_keep\n        ])\n        .drop_nulls()\n    )\n    \ndef join_train_test_dataframes(train: pl.DataFrame, test: pl.DataFrame) -> pl.DataFrame:\n    \"\"\"\n    Joins two dataframes by common columns and concatenates them vertically.\n\n    Args:\n        train (pl.DataFrame): The training DataFrame.\n        test (pl.DataFrame): The testing DataFrame.\n\n    Returns:\n        pl.DataFrame: A single DataFrame with vertically stacked data from common columns.\n    \"\"\"\n    common_columns: list[str] = [col for col in train.columns if col in test.columns]\n    \n    return pl.concat([train.select(common_columns), test.select(common_columns)], how=\"vertical\")\n\ndef split_dataset(train: pl.DataFrame, test: pl.DataFrame, features: list[str]) -> DatasetOutput: \n    \"\"\"\n    Splits the data into features (X) and target (y), and scales the features.\n\n    Args:\n        train (pl.DataFrame): The processed training DataFrame.\n        test (pl.DataFrame): The processed testing DataFrame.\n        features (list[str]): List of features to used in model. \n\n    Returns:\n        DatasetOutput: A dataclass containing the scaled feature sets, target series, and the fitted scaler.\n    \"\"\"\n    X_train = train.drop(['date_id','target']) \n    y_train = train.get_column('target')\n    X_test = test.drop(['date_id','target']) \n    y_test = test.get_column('target')\n    \n    scaler = StandardScaler() \n    \n    X_train_scaled_np = scaler.fit_transform(X_train)\n    X_train = pl.from_numpy(X_train_scaled_np, schema=features)\n    \n    X_test_scaled_np = scaler.transform(X_test)\n    X_test = pl.from_numpy(X_test_scaled_np, schema=features)\n    \n    \n    return DatasetOutput(\n        X_train = X_train,\n        y_train = y_train, \n        X_test = X_test, \n        y_test = y_test,\n        scaler = scaler\n    )","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-19T03:28:51.324363Z","iopub.execute_input":"2025-09-19T03:28:51.324653Z","iopub.status.idle":"2025-09-19T03:28:51.337307Z","shell.execute_reply.started":"2025-09-19T03:28:51.324634Z","shell.execute_reply":"2025-09-19T03:28:51.336414Z"}},"outputs":[],"execution_count":13},{"cell_type":"markdown","source":"## Converting Return Prediction to Signal\n\nHere is an example of a potential function used to convert a prediction based on the market forward excess return to a daily signal position. ","metadata":{}},{"cell_type":"code","source":"def convert_ret_to_signal(\n    ret_arr: np.ndarray,\n    params: RetToSignalParameters\n) -> np.ndarray:\n    \"\"\"\n    Converts raw model predictions (expected returns) into a trading signal.\n\n    Args:\n        ret_arr (np.ndarray): The array of predicted returns.\n        params (RetToSignalParameters): Parameters for scaling and clipping the signal.\n\n    Returns:\n        np.ndarray: The resulting trading signal, clipped between min and max values.\n    \"\"\"\n    return np.clip(\n        ret_arr * params.signal_multiplier + 1, params.min_signal, params.max_signal\n    )","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-19T03:28:55.423675Z","iopub.execute_input":"2025-09-19T03:28:55.424019Z","iopub.status.idle":"2025-09-19T03:28:55.429372Z","shell.execute_reply.started":"2025-09-19T03:28:55.423994Z","shell.execute_reply":"2025-09-19T03:28:55.428296Z"}},"outputs":[],"execution_count":14},{"cell_type":"markdown","source":"## Looking at the Data","metadata":{}},{"cell_type":"code","source":"train: pl.DataFrame = load_trainset()\ntest: pl.DataFrame = load_testset() \nprint(train.tail(3)) \nprint(test.head(3))","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-19T03:28:59.362422Z","iopub.execute_input":"2025-09-19T03:28:59.362728Z","iopub.status.idle":"2025-09-19T03:28:59.442642Z","shell.execute_reply.started":"2025-09-19T03:28:59.362709Z","shell.execute_reply":"2025-09-19T03:28:59.441594Z"}},"outputs":[{"name":"stdout","text":"shape: (3, 98)\n┌─────────┬─────┬─────┬─────┬───┬───────────┬─────────────────┬────────────────┬──────────┐\n│ date_id ┆ D1  ┆ D2  ┆ D3  ┆ … ┆ V9        ┆ forward_returns ┆ risk_free_rate ┆ target   │\n│ ---     ┆ --- ┆ --- ┆ --- ┆   ┆ ---       ┆ ---             ┆ ---            ┆ ---      │\n│ i64     ┆ f64 ┆ f64 ┆ f64 ┆   ┆ f64       ┆ f64             ┆ f64            ┆ f64      │\n╞═════════╪═════╪═════╪═════╪═══╪═══════════╪═════════════════╪════════════════╪══════════╡\n│ 8977    ┆ 0.0 ┆ 0.0 ┆ 0.0 ┆ … ┆ -0.708599 ┆ 0.004187        ┆ 0.000162       ┆ 0.003713 │\n│ 8978    ┆ 0.0 ┆ 0.0 ┆ 0.0 ┆ … ┆ -0.725858 ┆ 0.002279        ┆ 0.000162       ┆ 0.001805 │\n│ 8979    ┆ 0.0 ┆ 0.0 ┆ 0.0 ┆ … ┆ -0.720092 ┆ 0.003541        ┆ 0.000161       ┆ 0.003068 │\n└─────────┴─────┴─────┴─────┴───┴───────────┴─────────────────┴────────────────┴──────────┘\nshape: (3, 99)\n┌─────────┬─────┬─────┬─────┬───┬───────────┬───────────┬─────────────────────┬────────────────────┐\n│ date_id ┆ D1  ┆ D2  ┆ D3  ┆ … ┆ is_scored ┆ target    ┆ lagged_risk_free_ra ┆ lagged_market_forw │\n│ ---     ┆ --- ┆ --- ┆ --- ┆   ┆ ---       ┆ ---       ┆ te                  ┆ ard_excess_r…      │\n│ i64     ┆ f64 ┆ f64 ┆ f64 ┆   ┆ f64       ┆ f64       ┆ ---                 ┆ ---                │\n│         ┆     ┆     ┆     ┆   ┆           ┆           ┆ f64                 ┆ f64                │\n╞═════════╪═════╪═════╪═════╪═══╪═══════════╪═══════════╪═════════════════════╪════════════════════╡\n│ 8980    ┆ 0.0 ┆ 0.0 ┆ 0.0 ┆ … ┆ 1.0       ┆ 0.003541  ┆ 0.000161            ┆ 0.003068           │\n│ 8981    ┆ 0.0 ┆ 0.0 ┆ 0.0 ┆ … ┆ 1.0       ┆ -0.005964 ┆ 0.000162            ┆ -0.006437          │\n│ 8982    ┆ 0.0 ┆ 0.0 ┆ 0.0 ┆ … ┆ 1.0       ┆ -0.00741  ┆ 0.00016             ┆ -0.007882          │\n└─────────┴─────┴─────┴─────┴───┴───────────┴───────────┴─────────────────────┴────────────────────┘\n","output_type":"stream"}],"execution_count":15},{"cell_type":"markdown","source":"## Generating the Train and Test","metadata":{}},{"cell_type":"code","source":"df: pl.DataFrame = join_train_test_dataframes(train, test)\ndf = create_example_dataset(df=df) \ntrain: pl.DataFrame = df.filter(pl.col('date_id').is_in(train.get_column('date_id')))\ntest: pl.DataFrame = df.filter(pl.col('date_id').is_in(test.get_column('date_id')))\n\nFEATURES: list[str] = [col for col in test.columns if col not in ['date_id', 'target']]\n\ndataset: DatasetOutput = split_dataset(train=train, test=test, features=FEATURES) \n\nX_train: pl.DataFrame = dataset.X_train\nX_test: pl.DataFrame = dataset.X_test\ny_train: pl.DataFrame = dataset.y_train\ny_test: pl.DataFrame = dataset.y_test\nscaler: StandardScaler = dataset.scaler ","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-19T03:29:03.012372Z","iopub.execute_input":"2025-09-19T03:29:03.012709Z","iopub.status.idle":"2025-09-19T03:29:03.048300Z","shell.execute_reply.started":"2025-09-19T03:29:03.012688Z","shell.execute_reply":"2025-09-19T03:29:03.047419Z"}},"outputs":[],"execution_count":16},{"cell_type":"markdown","source":"## Fitting the Model ","metadata":{}},{"cell_type":"code","source":"model_cv: ElasticNetCV = ElasticNetCV(\n    **asdict(enet_params)\n)\nmodel_cv.fit(X_train, y_train) \n        \n# Fit the final model using the best alpha found by cross-validation\nmodel: ElasticNet = ElasticNet(alpha=model_cv.alpha_, l1_ratio=enet_params.l1_ratio) \nmodel.fit(X_train, y_train)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-19T03:29:05.793398Z","iopub.execute_input":"2025-09-19T03:29:05.793663Z","iopub.status.idle":"2025-09-19T03:29:05.922417Z","shell.execute_reply.started":"2025-09-19T03:29:05.793645Z","shell.execute_reply":"2025-09-19T03:29:05.921479Z"}},"outputs":[{"execution_count":17,"output_type":"execute_result","data":{"text/plain":"ElasticNet(alpha=0.00026560877829466864)","text/html":"<style>#sk-container-id-2 {color: black;background-color: white;}#sk-container-id-2 pre{padding: 0;}#sk-container-id-2 div.sk-toggleable {background-color: white;}#sk-container-id-2 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-2 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-2 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-2 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-2 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-2 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-2 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-2 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-2 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-2 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-2 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-2 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-2 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-2 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-2 div.sk-item {position: relative;z-index: 1;}#sk-container-id-2 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-2 div.sk-item::before, #sk-container-id-2 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-2 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-2 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-2 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-2 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-2 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-2 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-2 div.sk-label-container {text-align: center;}#sk-container-id-2 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-2 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-2\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>ElasticNet(alpha=0.00026560877829466864)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-2\" type=\"checkbox\" checked><label for=\"sk-estimator-id-2\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">ElasticNet</label><div class=\"sk-toggleable__content\"><pre>ElasticNet(alpha=0.00026560877829466864)</pre></div></div></div></div></div>"},"metadata":{}}],"execution_count":17},{"cell_type":"markdown","source":"## Prediction Function via Kaggle Server","metadata":{}},{"cell_type":"code","source":"def predict(test: pl.DataFrame) -> float:\n    test = test.rename({'lagged_forward_returns':'target'})\n    df: pl.DataFrame = create_example_dataset(test)\n    X_test: pl.DataFrame = df.select(FEATURES)\n    X_test_scaled_np: np.ndarray = scaler.transform(X_test)\n    X_test: pl.DataFrame = pl.from_numpy(X_test_scaled_np, schema=FEATURES)\n    raw_pred: float = model.predict(X_test)[0]\n    return convert_ret_to_signal(raw_pred, ret_signal_params)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-19T03:29:08.700173Z","iopub.execute_input":"2025-09-19T03:29:08.700437Z","iopub.status.idle":"2025-09-19T03:29:08.705807Z","shell.execute_reply.started":"2025-09-19T03:29:08.700419Z","shell.execute_reply":"2025-09-19T03:29:08.704779Z"}},"outputs":[],"execution_count":18},{"cell_type":"markdown","source":"## Launch Server","metadata":{}},{"cell_type":"code","source":"inference_server = kaggle_evaluation.default_inference_server.DefaultInferenceServer(predict)\n\nif os.getenv('KAGGLE_IS_COMPETITION_RERUN'):\n    inference_server.serve()\nelse:\n    inference_server.run_local_gateway(('/kaggle/input/hull-tactical-market-prediction/',))","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-19T03:29:11.762570Z","iopub.execute_input":"2025-09-19T03:29:11.762880Z","iopub.status.idle":"2025-09-19T03:29:11.933154Z","shell.execute_reply.started":"2025-09-19T03:29:11.762859Z","shell.execute_reply":"2025-09-19T03:29:11.932339Z"}},"outputs":[],"execution_count":19},{"cell_type":"code","source":"","metadata":{"trusted":true},"outputs":[],"execution_count":null}]}